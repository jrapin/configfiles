# Virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh

export PATH=/usr/local/cuda/bin:$PATH
export PATH=~/Applications/Arcanist/arcanist/bin:$PATH
# export PATH=/home/jeremy/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
# export PATH=$PATH:~/Applications/node-v0.12.4-linux-x64/bin
# export PATH=$PATH:~/Applications/arcanist/bin

# aliases
alias nose='docker-compose run cardiolib nosetests -v --rednose'
alias spyder='/usr/local/bin/spyder'

# Autojump
. /usr/share/autojump/autojump.sh
alias protege='screen -d -m -S protege bash -c /home/jeremy/Applications/Protege/run.sh'

# create a byobu session with ipython on the right, and keeping the virtualenv or specifying it
function ipyvim {
  # $1 session name
  # $2 virtualenv name (default to current virtualenv)
  if tmux has-session -t $1 2>/dev/null; then
    tmux attach -t $1
  else
    window_virtualenv=$2
    if [ "$2" = "" ]; then
      if [ "$VIRTUAL_ENV" != "" ]; then
        window_virtualenv="`basename \"$VIRTUAL_ENV\"`"
      fi
    fi
    byobu-tmux new-session -d -s $1
    byobu-tmux split-window -d -t $1 -h
    if [ "$window_virtualenv" != "" ]; then
      # virtualenv seems to not propagate properly...
      # inspiration: cenkalti https://github.com/Paczesiowa/virthualenv/issues/38
      virtualenv_instruction="workon $window_virtualenv"
      byobu-tmux send-keys -t $1 $virtualenv_instruction enter C-l
      byobu-tmux send-keys -t $1.right $virtualenv_instruction enter C-l
    fi
    byobu-tmux send-keys -t $1.right 'ipython' enter C-l
    byobu-tmux send-keys -t $1.left 'vim' enter
    byobu-tmux resize-pane -t $1 -R 15
    byobu-tmux attach -t $1
  fi
}


alias ipv="ipyvim"
# define autocompletion
compdef __tmux-sessions ipyvim

function vv {
  name="_virtual_vim_$1"
  if tmux has-session -t $name 2>/dev/null; then
    tmux attach -t $name
  else
    ipyvim $name $1
  fi
}

